name: Test
on:
  push:
    branches:
      - master
      - demo-github-action
  pull_request:
jobs:

  test-github-action:
    name: "[core] github action"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Install Task
        uses: arduino/setup-task@v1
        with:
          version: '3.0.0'
      # name: Build orlangure/gnomock image
      # run: task gnomock:build:server
      - name: Start Gnomock server
        uses: gnomock/github-action@master
      - name: Test Gnomock connection
        run: curl 127.0.0.1:23042/start/mongo -d '{}'
      - name: Test Gnomock started service connection
        run: nc -z 127.0.0.1 $(curl 127.0.0.1:23042/start/mongo -d '{}' | jq .ports.default.port)
      - uses: uraimo/run-on-arch-action@v2.1.1
        name: Run commands
        id: runcmd
        with:
          arch: armv7
          distro: ubuntu18.04
          dockerRunArgs: |
            -v /var/run/docker.sock:/var/run/docker.sock --privileged

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}

          install: |
            apt-get update -q -y
            apt-get install -y curl jq netcat-openbsd
          run: |
            curl 127.0.0.1:23042/start/mongo -d '{}'
            nc -z 127.0.0.1 $(curl 127.0.0.1:23042/start/mongo -d '{}' | jq .ports.default.port)

  test-github-action-in-container:
    name: "[core] github action in container"
    runs-on: ubuntu-latest
    container:
      image: debian:bullseye
    services:
      gnomock:
        image: orlangure/gnomock
        options: -v /var/run/docker.sock:/var/run/docker.sock
        ports:
          - 23042:23042
    steps:
      - name: Test
        run: |
          apt-get update -q -y
          apt-get install -y curl jq netcat-openbsd
          curl gnomock:23042/start/mongo -d '{}'
          nc -vvv -z gnomock $(curl gnomock:23042/start/mongo -d '{}' | jq .ports.default.port)
